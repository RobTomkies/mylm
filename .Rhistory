nsamples <- nsamplevec[i]
truesamples <- rchisq(nsamples, df = 20, ncp = 0)
normalMCI[i] <- sum(truesamples<9)/nsamples
#part 1
normsamples <- rchisq(nsamples, df = 6, ncp = 0)
weights <- (1/(8192*gamma(10)*gamma(3)))*x^7
importance_sampling_est[i] <- sum(weights[normsamples<9])/nsamples
# # part 2
# expsamples <- 9+rexp(nsamples)
# weights <- expsamples^2/(2*exp(9))
# importance_sampling_est[i] <- sum(weights[expsamples>9])/nsamples
}
plot(nsamplevec,normalMCI,type="l",col="black",lwd=2, ylab="Estimates",xlab="Sample Size")
lines(nsamplevec,importance_sampling_est,lty=1,col="navyblue", lwd=3)
normalMCI <- 0
importance_sampling_est <- 0
nsamplevec <- 200*(1:30)
set.seed(4)
for (i in 1:30){
nsamples <- nsamplevec[i]
truesamples <- rchisq(nsamples, df = 20, ncp = 0)
normalMCI[i] <- sum(truesamples<9)/nsamples
#part 1
normsamples <- rchisq(nsamples, df = 6, ncp = 0)
weights <- (9/(1024*gamma(10)))*normsamples^9*e^(normsamples/2)
importance_sampling_est[i] <- sum(weights[normsamples<9])/nsamples
# # part 2
# expsamples <- 9+rexp(nsamples)
# weights <- expsamples^2/(2*exp(9))
# importance_sampling_est[i] <- sum(weights[expsamples>9])/nsamples
}
normalMCI <- 0
importance_sampling_est <- 0
nsamplevec <- 200*(1:30)
set.seed(4)
for (i in 1:30){
nsamples <- nsamplevec[i]
truesamples <- rchisq(nsamples, df = 20, ncp = 0)
normalMCI[i] <- sum(truesamples<9)/nsamples
#part 1
normsamples <- rchisq(nsamples, df = 6, ncp = 0)
weights <- (9/(1024*gamma(10)))*normsamples^9*exp(normsamples/2)
importance_sampling_est[i] <- sum(weights[normsamples<9])/nsamples
# # part 2
# expsamples <- 9+rexp(nsamples)
# weights <- expsamples^2/(2*exp(9))
# importance_sampling_est[i] <- sum(weights[expsamples>9])/nsamples
}
plot(nsamplevec,normalMCI,type="l",col="black",lwd=2, ylab="Estimates",xlab="Sample Size")
lines(nsamplevec,importance_sampling_est,lty=1,col="navyblue", lwd=3)
#part 1
?runif
normalMCI <- 0
importance_sampling_est <- 0
nsamplevec <- 200*(1:30)
set.seed(4)
for (i in 1:30){
nsamples <- nsamplevec[i]
truesamples <- rchisq(nsamples, df = 20, ncp = 0)
normalMCI[i] <- sum(truesamples<9)/nsamples
#part 1
normsamples <- runif(nsamples, min =  0, max = 9)
weights <- (9/(1024*gamma(10)))*normsamples^9*exp(normsamples/2)
importance_sampling_est[i] <- sum(weights[normsamples<9])/nsamples
# # part 2
# expsamples <- 9+rexp(nsamples)
# weights <- expsamples^2/(2*exp(9))
# importance_sampling_est[i] <- sum(weights[expsamples>9])/nsamples
}
plot(nsamplevec,normalMCI,type="l",col="black",lwd=2, ylab="Estimates",xlab="Sample Size")
lines(nsamplevec,importance_sampling_est,lty=1,col="navyblue", lwd=3)
normalMCI <- 0
importance_sampling_est <- 0
nsamplevec <- 200*(1:30)
set.seed(4)
for (i in 1:30){
nsamples <- nsamplevec[i]
truesamples <- rchisq(nsamples, df = 20, ncp = 0)
normalMCI[i] <- sum(truesamples<9)/nsamples
#part 1
normsamples <- runif(nsamples, min =  0, max = 10)
weights <- (10/(1024*gamma(10)))*normsamples^9*exp(normsamples/2)
importance_sampling_est[i] <- sum(weights[normsamples<9])/nsamples
# # part 2
# expsamples <- 9+rexp(nsamples)
# weights <- expsamples^2/(2*exp(9))
# importance_sampling_est[i] <- sum(weights[expsamples>9])/nsamples
}
plot(nsamplevec,normalMCI,type="l",col="black",lwd=2, ylab="Estimates",xlab="Sample Size")
lines(nsamplevec,importance_sampling_est,lty=1,col="navyblue", lwd=3)
nsamplevec
importance_sampling_est
normalMCI <- 0
importance_sampling_est <- 0
nsamplevec <- 200*(1:30)
set.seed(4)
for (i in 1:30){
nsamples <- nsamplevec[i]
truesamples <- rchisq(nsamples, df = 20, ncp = 0)
normalMCI[i] <- sum(truesamples<9)/nsamples
#part 1
normsamples <- runif(nsamples, min =  0, max = 10)
weights <- (10/(1024*gamma(10)))*normsamples^9*exp(normsamples/2)
importance_sampling_est[i] <- sum(weights[normsamples<9])/nsamples
# # part 2
# expsamples <- 9+rexp(nsamples)
# weights <- expsamples^2/(2*exp(9))
# importance_sampling_est[i] <- sum(weights[expsamples>9])/nsamples
}
plot(nsamplevec,normalMCI,type="l",col="black",lwd=2, ylab="Estimates",xlab="Sample Size")
lines(nsamplevec,importance_sampling_est,lty=1,col="navyblue", lwd=3)
normalMCI <- 0
importance_sampling_est <- 0
nsamplevec <- 200*(1:30)
set.seed(4)
for (i in 1:30){
nsamples <- nsamplevec[i]
truesamples <- rchisq(nsamples, df = 20, ncp = 0)
normalMCI[i] <- sum(truesamples<9)/nsamples
#part 1
normsamples <- runif(nsamples, min =  0, max = 9)
weights <- (9/(1024*gamma(10)))*normsamples^9*exp(normsamples/2)
importance_sampling_est[i] <- sum(weights[normsamples<9])/nsamples
# # part 2
# expsamples <- 9+rexp(nsamples)
# weights <- expsamples^2/(2*exp(9))
# importance_sampling_est[i] <- sum(weights[expsamples>9])/nsamples
}
plot(nsamplevec,normalMCI,type="l",col="black",lwd=2, ylab="Estimates",xlab="Sample Size")
lines(nsamplevec,importance_sampling_est,lty=1,col="navyblue", lwd=3)
normalMCI <- 0
importance_sampling_est <- 0
nsamplevec <- 200*(1:30)
set.seed(4)
for (i in 1:30){
nsamples <- nsamplevec[i]
truesamples <- rchisq(nsamples, df = 20, ncp = 0)
normalMCI[i] <- sum(truesamples<9)/nsamples
#part 1
normsamples <- runif(nsamples, min =  0, max = 9)
weights <- (1/(1024*normsamples*gamma(10)))*normsamples^9*exp(normsamples/2)
importance_sampling_est[i] <- sum(weights[normsamples<9])/nsamples
# # part 2
# expsamples <- 9+rexp(nsamples)
# weights <- expsamples^2/(2*exp(9))
# importance_sampling_est[i] <- sum(weights[expsamples>9])/nsamples
}
plot(nsamplevec,normalMCI,type="l",col="black",lwd=2, ylab="Estimates",xlab="Sample Size")
lines(nsamplevec,importance_sampling_est,lty=1,col="navyblue", lwd=3)
normalMCI <- 0
importance_sampling_est <- 0
nsamplevec <- 200*(1:30)
set.seed(4)
for (i in 1:30){
nsamples <- nsamplevec[i]
truesamples <- rchisq(nsamples, df = 20, ncp = 0)
normalMCI[i] <- sum(truesamples<9)/nsamples
#part 1
normsamples <- rchisq(nsamples, df = 20, ncp = 0)
weights <- (1/(1024*gamma(10)))*normsamples^9*exp(normsamples/2)
importance_sampling_est[i] <- sum(weights[normsamples<9])/nsamples
# # part 2
# expsamples <- 9+rexp(nsamples)
# weights <- expsamples^2/(2*exp(9))
# importance_sampling_est[i] <- sum(weights[expsamples>9])/nsamples
}
plot(nsamplevec,normalMCI,type="l",col="black",lwd=2, ylab="Estimates",xlab="Sample Size")
lines(nsamplevec,importance_sampling_est,lty=1,col="navyblue", lwd=3)
normalMCI <- 0
importance_sampling_est <- 0
nsamplevec <- 200*(1:30)
set.seed(4)
for (i in 1:30){
nsamples <- nsamplevec[i]
truesamples <- rchisq(nsamples, df = 20, ncp = 0)
normalMCI[i] <- sum(truesamples<9)/nsamples
#part 1
normsamples <- rchisq(nsamples, df = 20, ncp = 0)
weights <- (1/(8192*gamma(10)*gamma(3)))*normsamples^7
importance_sampling_est[i] <- sum(weights[normsamples<9])/nsamples
# # part 2
# expsamples <- 9+rexp(nsamples)
# weights <- expsamples^2/(2*exp(9))
# importance_sampling_est[i] <- sum(weights[expsamples>9])/nsamples
}
plot(nsamplevec,normalMCI,type="l",col="black",lwd=2, ylab="Estimates",xlab="Sample Size")
lines(nsamplevec,importance_sampling_est,lty=1,col="navyblue", lwd=3)
importance_sampling_est
impsampling <- function(N,niter){
p <- rep(NA,niter) #create a null vector for storing the estimate
for (i in 1:niter){
zvec<- rchisq(N, df = 20, ncp = 0)
h <- zvec<9 #create a logical vector: 1(TRUE) if z<9, 0 (FALSE) otherwise
w <- (1/(8192*gamma(10)*gamma(3)))*zvec^7 #calculate weights
p[i] <- sum(w*h)/N #calculate estimates as weighted average of h(z)
}
summ.p <- list(mean(p),var(p)) #calculate average and variance of estimates
names(summ.p) <- c("mean(p)","var(p)")
return(summ.p)
}
impsampling(1000,100) #obtain 100 estimates using 1000 values of z each time
impsampling <- function(N,niter){
p <- rep(NA,niter) #create a null vector for storing the estimate
for (i in 1:niter){
zvec<- rchisq(N, df = 6, ncp = 0)
h <- zvec<9 #create a logical vector: 1(TRUE) if z<9, 0 (FALSE) otherwise
w <- (1/(8192*gamma(10)*gamma(3)))*zvec^7 #calculate weights
p[i] <- sum(w*h)/N #calculate estimates as weighted average of h(z)
}
summ.p <- list(mean(p),var(p)) #calculate average and variance of estimates
names(summ.p) <- c("mean(p)","var(p)")
return(summ.p)
}
impsampling(1000,100) #obtain 100 estimates using 1000 values of z each time
impsampling <- function(N,niter){
p <- rep(NA,niter) #create a null vector for storing the estimate
for (i in 1:niter){
zvec<- rchisq(N, df = 6, ncp = 0)
h <- zvec<9 #create a logical vector: 1(TRUE) if z<9, 0 (FALSE) otherwise
#w <- (1/(8192*gamma(10)*gamma(3)))*zvec^7 #calculate weights
w <- (9/(1024)*gamma(10))*zvec^9*exp(-zvec/2)
p[i] <- sum(w*h)/N #calculate estimates as weighted average of h(z)
}
summ.p <- list(mean(p),var(p)) #calculate average and variance of estimates
names(summ.p) <- c("mean(p)","var(p)")
return(summ.p)
}
impsampling(1000,100) #obtain 100 estimates using 1000 values of z each time
impsampling <- function(N,niter){
p <- rep(NA,niter) #create a null vector for storing the estimate
for (i in 1:niter){
zvec<- rchisq(N, df = 6, ncp = 0)
h <- zvec<9 #create a logical vector: 1(TRUE) if z<9, 0 (FALSE) otherwise
#w <- (1/(8192*gamma(10)*gamma(3)))*zvec^7 #calculate weights
w <- (9/(1024*gamma(10)))*zvec^9*exp(-zvec/2)
p[i] <- sum(w*h)/N #calculate estimates as weighted average of h(z)
}
summ.p <- list(mean(p),var(p)) #calculate average and variance of estimates
names(summ.p) <- c("mean(p)","var(p)")
return(summ.p)
}
impsampling(1000,100) #obtain 100 estimates using 1000 values of z each time
impsampling <- function(N,niter){
p <- rep(NA,niter) #create a null vector for storing the estimate
for (i in 1:niter){
zvec<- rchisq(N, df = 6, ncp = 0)
h <- zvec<9 #create a logical vector: 1(TRUE) if z<9, 0 (FALSE) otherwise
#w <- (1/(8192*gamma(10)*gamma(3)))*zvec^7 #calculate weights
w <- (9/(1024*gamma(10)))*zvec^9*exp(-zvec/2)
p[i] <- sum(w*h)/N #calculate estimates as weighted average of h(z)
}
summ.p <- list(mean(p),var(p)) #calculate average and variance of estimates
names(summ.p) <- c("mean(p)","var(p)")
return(summ.p)
}
impsampling(1000,100) #obtain 100 estimates using 1000 values of z each time
impsampling <- function(N,niter){
p <- rep(NA,niter) #create a null vector for storing the estimate
for (i in 1:niter){
zvec<- rchisq(N, df = 6, ncp = 0)
h <- zvec<9 #create a logical vector: 1(TRUE) if z<9, 0 (FALSE) otherwise
#w <- (1/(8192*gamma(10)*gamma(3)))*zvec^7 #calculate weights
w <- (9/(1024*gamma(10)))*zvec^9*exp(-zvec/2)
p[i] <- sum(w*h)/N #calculate estimates as weighted average of h(z)
}
summ.p <- list(mean(p),var(p)) #calculate average and variance of estimates
names(summ.p) <- c("mean(p)","var(p)")
return(summ.p)
}
impsampling(1000,100) #obtain 100 estimates using 1000 values of z each time
normalMCI <- 0
importance_sampling_est <- 0
nsamplevec <- 200*(1:30)
set.seed(4)
for (i in 1:30){
nsamples <- nsamplevec[i]
truesamples <- rchisq(nsamples, df = 20, ncp = 0)
normalMCI[i] <- sum(truesamples<9)/nsamples
#part 1
normsamples <- runif(nsamples,min=0,max =9)
weights <- (1/(8192*gamma(10)*gamma(3)))*normsamples^7
importance_sampling_est[i] <- sum(weights[normsamples<9])/nsamples
# # part 2
# expsamples <- 9+rexp(nsamples)
# weights <- expsamples^2/(2*exp(9))
# importance_sampling_est[i] <- sum(weights[expsamples>9])/nsamples
}
plot(nsamplevec,normalMCI,type="l",col="black",lwd=2, ylab="Estimates",xlab="Sample Size")
lines(nsamplevec,importance_sampling_est,lty=1,col="navyblue", lwd=3)
mci <- function(N, niter){
p <- rep(NA,niter) #create a null vector for storing the estimates
for (i in 1:niter){
zvec <- rchisq(N, df = 20, ncp = 0) #at each iteration i generate N values of z-N(0,1)
p[i] <- length(zvec[zvec<9])/N #calculate proportion of Z <9
}
summ.p <- list(mean(p), var(p))
names(summ.p) <- c('mean(p)','var(p)')
return(summ.p)
}
mci(1000,100) #obtain 100 estimates using 1000 values of z each time
n <- 10-4
##Monte Carlo integration
z <- rchisq(n, df = 20, ncp = 0)
zind <- z<9
pmci <- cumsum(zind)/1:n
plot(pmci, type="l", xlab="Iteration", ylab="Estimate")
n <- 10^4
##Monte Carlo integration
z <- rchisq(n, df = 20, ncp = 0)
zind <- z<9
pmci <- cumsum(zind)/1:n
plot(pmci, type="l", xlab="Iteration", ylab="Estimate")
impsampling <- function(N,niter){
p <- rep(NA,niter) #create a null vector for storing the estimate
for (i in 1:niter){
zvec<- runif(N, min = 0, max = 9)
h <- zvec<9 #create a logical vector: 1(TRUE) if z<9, 0 (FALSE) otherwise
#w <- (1/(8192*gamma(10)*gamma(3)))*zvec^7 #calculate weights
w <- (9/(1024*gamma(10)))*zvec^9*exp(-zvec/2)
p[i] <- sum(w*h)/N #calculate estimates as weighted average of h(z)
}
summ.p <- list(mean(p),var(p)) #calculate average and variance of estimates
names(summ.p) <- c("mean(p)","var(p)")
return(summ.p)
}
impsampling(1000,100) #obtain 100 estimates using 1000 values of z each time
n <- 10^4
##Monte Carlo integration
z <- rchisq(n, df = 20, ncp = 0)
zind <- z<9
pmci <- cumsum(zind)/1:n
plot(pmci, type="l", xlab="Iteration", ylab="Estimate")
##Importance sampling
z <- runif(n,4,1)
h <- z<9
w <- (9/(1024*gamma(10)))*z^9*exp(-z/2)
pims <- cumsum(w*h)/1:n
lines(pims, col="gray", lwd=3)
abline(h=pnorm(3,lower.tail=F), lty=2, col="sienna")
n <- 10^4
##Monte Carlo integration
z <- rchisq(n, df = 20, ncp = 0)
zind <- z<9
pmci <- cumsum(zind)/1:n
plot(pmci, type="l", xlab="Iteration", ylab="Estimate")
##Importance sampling
z <- runif(n,0,9)
h <- z<9
w <- (9/(1024*gamma(10)))*z^9*exp(-z/2)
pims <- cumsum(w*h)/1:n
lines(pims, col="gray", lwd=3)
abline(h=pnorm(3,lower.tail=F), lty=2, col="sienna")
n <- 10^4
##Monte Carlo integration
z <- rchisq(n, df = 20, ncp = 0)
zind <- z<9
pmci <- cumsum(zind)/1:n
plot(pmci, type="l", xlab="Iteration", ylab="Estimate")
##Importance sampling
z <- runif(n,0,9)
h <- z<9
w <- (9/(1024*gamma(10)))*z^9*exp(-z/2)
pims <- cumsum(w*h)/1:n
lines(pims, col="gray", lwd=3)
abline(h=0.01698783, lty=2, col="sienna")
n <- 10^4
##Monte Carlo integration
z <- rchisq(n, df = 20, ncp = 0)
zind <- z<9
pmci <- cumsum(zind)/1:n
plot(pmci, type="l", xlab="Iteration", ylab="Estimate")
##Importance sampling
z <- runif(n,0,9)
h <- z<9
w <- (9/(1024*gamma(10)))*z^9*exp(-z/2)
pims <- cumsum(w*h)/1:n
lines(pims, col="gray", lwd=3)
n <- 10^4
##Monte Carlo integration
set.seed(0)
z <- rchisq(n, df = 20, ncp = 0)
zind <- z<9
pmci <- cumsum(zind)/1:n
plot(pmci, type="l", xlab="Iteration", ylab="Estimate")
##Importance sampling
set.seed(0)
z <- runif(n,0,9)
h <- z<9
w <- (9/(1024*gamma(10)))*z^9*exp(-z/2)
pims <- cumsum(w*h)/1:n
lines(pims, col="gray", lwd=3)
devtools::has_devel()
library(devtools)
getwd()
create_package("~/Documents/University lectures/Data501/AutoData/Auto_Data/Auto_data_package")
create_package("~/OneDrive/Documents/University lectures/Data501/AutoData/Auto_Data/Auto_data_package")
create_package("~/OneDrive/Documents/University lectures/Data501/AutoData/Auto_Data/AutoDataPackage")
pacman::p_load(devtools)
setwd("~/University lectures/Data501/assignment2/mylm")
load_all()
test()
load_all()
test()
data(iris)
data_characters <- iris
data_characters$character_species <- as.character(data_characters$Species)
data_characters$character_speciesb <- as.character(data_characters$Species)
data_tests<- data.frame(z = as.factor(c(NA, "hello", "hello", "hello", "orange", "orange", "orange", "orange", "orange", "orange")),
x = c(2,2,2,2,2,2,2,2,2,2),
y = c(0,1,2,3,4,5,6,8,9,10),
a = as.factor(c("hey", "hey", "hey", "hey", "hey","hey", "hey", "hey", "hey", "hey")),
b = c(2,3,4,5,6,7,8,9,10,11),
c1 = c(1,2,3,4,5,6,7,8,9,10),
c2 = c(1,2,3,4,5,6,7,8,9,10))
mylm(y ~ c1 + c2, data_tests)
load_all()
mylm(y ~ c1 + c2, data_tests)
load_all()
mylm(y ~ c1 + c2, data_tests)
1 == 1.00
1 == 1.00
datab <- data.frame(a = c(1,2,3,4,5,6), b = c(2,3,4,5,6,7), c = c(1,1,1,1,1,1))
cor(datab)
x <- cor(datab)
diag(x) <- 0
is.na(x) <- 0
x
is.na(x)
is.na(x) <- 0
x
x[is.na(x)] <- 0
x
datab <- data.frame(a = c(1,2,3,4,5,6), b = c(2,3,4,5,6,7), c = c(1,1,1,1,1,1))
x <- cor(datab)
diag(x) <- 0
x[is.na(x)] <- 0
x
x == 1.0
any(x==1.00)
any(x==1)
load_all()
mylm(y ~ c1 + c2, data_tests)
load_all()
mylm(y ~ c1 + c2, data_tests)
load_all()
mylm(y ~ c1 + c2, data_tests)
load_all()
mylm(y ~ c1 + c2, data_tests)
load_all()
mylm(y ~ c1 + c2, data_tests)
load_all()
mylm(y ~ c1 + c2, data_tests)
load_all()
mylm(y ~ c1 + c2, data_tests)
load_all()
mylm(y ~ c1 + c2, data_tests)
load_all()
mylm(y ~ c1 + c2, data_tests)
load_all()
mylm(y ~ c1 + c2, data_tests)
load_all()
test()
x <- c("hat", "car", "hat")
y <- c("hat", "car", "hat")
x == y
all(x == y)
load_all()
test()
mylm(y ~ x + b, data_tests, subset= c(3:10)
)
load_all()
test()
data_tests<- data.frame(z = as.factor(c(NA, "hello", "hello", "hello", "orange", "orange", "orange", "orange", "orange", "orange")),
x = c(2,2,2,2,2,2,2,2,2,2),
y = c(0,1,2,3,4,5,6,8,9,10),
a = as.factor(c("hey", "hey", "hey", "hey", "hey","hey", "hey", "hey", "hey", "hey")),
b = c(2,3,4,5,6,7,8,9,10,11),
c1 = c(1,2,3,4,5,6,7,8,9,10),
c2 = c(1,2,3,4,5,6,7,8,9,10))
use_data(datatests)
use_data(data_tests)
use_data(iris)
rm()
rm(list = ls())
load_all()
test()
rm(list = ls())
load_all()
test()
mylm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, iris)
x <- mylm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, iris)
names(x)
x$call
x$formula
x$data
names(x)
x$yname
x$coef
x$call
x$formula
x$data
x$yname
x$formula
x$coef
x$sigma
x$vcov
x$npar
x$df.residual
x$formula
x$df.residual
x$residuals
x$fitted.values
